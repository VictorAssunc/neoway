// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -typed -source=client.go -destination=../repository/mock/client.go -package=repository -build_flags=-mod=mod
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	entity "neoway/pkg/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientRepository is a mock of ClientRepository interface.
type MockClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepositoryMockRecorder
}

// MockClientRepositoryMockRecorder is the mock recorder for MockClientRepository.
type MockClientRepositoryMockRecorder struct {
	mock *MockClientRepository
}

// NewMockClientRepository creates a new mock instance.
func NewMockClientRepository(ctrl *gomock.Controller) *MockClientRepository {
	mock := &MockClientRepository{ctrl: ctrl}
	mock.recorder = &MockClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRepository) EXPECT() *MockClientRepositoryMockRecorder {
	return m.recorder
}

// CreateMulti mocks base method.
func (m *MockClientRepository) CreateMulti(ctx context.Context, clients []*entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulti", ctx, clients)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMulti indicates an expected call of CreateMulti.
func (mr *MockClientRepositoryMockRecorder) CreateMulti(ctx, clients any) *MockClientRepositoryCreateMultiCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulti", reflect.TypeOf((*MockClientRepository)(nil).CreateMulti), ctx, clients)
	return &MockClientRepositoryCreateMultiCall{Call: call}
}

// MockClientRepositoryCreateMultiCall wrap *gomock.Call
type MockClientRepositoryCreateMultiCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientRepositoryCreateMultiCall) Return(arg0 error) *MockClientRepositoryCreateMultiCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientRepositoryCreateMultiCall) Do(f func(context.Context, []*entity.Client) error) *MockClientRepositoryCreateMultiCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientRepositoryCreateMultiCall) DoAndReturn(f func(context.Context, []*entity.Client) error) *MockClientRepositoryCreateMultiCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPaginated mocks base method.
func (m *MockClientRepository) GetPaginated(ctx context.Context, limit, offset int) ([]*entity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginated", ctx, limit, offset)
	ret0, _ := ret[0].([]*entity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginated indicates an expected call of GetPaginated.
func (mr *MockClientRepositoryMockRecorder) GetPaginated(ctx, limit, offset any) *MockClientRepositoryGetPaginatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginated", reflect.TypeOf((*MockClientRepository)(nil).GetPaginated), ctx, limit, offset)
	return &MockClientRepositoryGetPaginatedCall{Call: call}
}

// MockClientRepositoryGetPaginatedCall wrap *gomock.Call
type MockClientRepositoryGetPaginatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientRepositoryGetPaginatedCall) Return(arg0 []*entity.Client, arg1 error) *MockClientRepositoryGetPaginatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientRepositoryGetPaginatedCall) Do(f func(context.Context, int, int) ([]*entity.Client, error)) *MockClientRepositoryGetPaginatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientRepositoryGetPaginatedCall) DoAndReturn(f func(context.Context, int, int) ([]*entity.Client, error)) *MockClientRepositoryGetPaginatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateMultiDocumentsValidity mocks base method.
func (m *MockClientRepository) UpdateMultiDocumentsValidity(ctx context.Context, clients []*entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMultiDocumentsValidity", ctx, clients)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiDocumentsValidity indicates an expected call of UpdateMultiDocumentsValidity.
func (mr *MockClientRepositoryMockRecorder) UpdateMultiDocumentsValidity(ctx, clients any) *MockClientRepositoryUpdateMultiDocumentsValidityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiDocumentsValidity", reflect.TypeOf((*MockClientRepository)(nil).UpdateMultiDocumentsValidity), ctx, clients)
	return &MockClientRepositoryUpdateMultiDocumentsValidityCall{Call: call}
}

// MockClientRepositoryUpdateMultiDocumentsValidityCall wrap *gomock.Call
type MockClientRepositoryUpdateMultiDocumentsValidityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientRepositoryUpdateMultiDocumentsValidityCall) Return(arg0 error) *MockClientRepositoryUpdateMultiDocumentsValidityCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientRepositoryUpdateMultiDocumentsValidityCall) Do(f func(context.Context, []*entity.Client) error) *MockClientRepositoryUpdateMultiDocumentsValidityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientRepositoryUpdateMultiDocumentsValidityCall) DoAndReturn(f func(context.Context, []*entity.Client) error) *MockClientRepositoryUpdateMultiDocumentsValidityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
