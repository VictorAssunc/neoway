// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -typed -source=client.go -destination=../service/mock/client.go -package=service -build_flags=-mod=mod
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	entity "neoway/pkg/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// CreateMulti mocks base method.
func (m *MockClientService) CreateMulti(ctx context.Context, clients []*entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulti", ctx, clients)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMulti indicates an expected call of CreateMulti.
func (mr *MockClientServiceMockRecorder) CreateMulti(ctx, clients any) *MockClientServiceCreateMultiCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulti", reflect.TypeOf((*MockClientService)(nil).CreateMulti), ctx, clients)
	return &MockClientServiceCreateMultiCall{Call: call}
}

// MockClientServiceCreateMultiCall wrap *gomock.Call
type MockClientServiceCreateMultiCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientServiceCreateMultiCall) Return(arg0 error) *MockClientServiceCreateMultiCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientServiceCreateMultiCall) Do(f func(context.Context, []*entity.Client) error) *MockClientServiceCreateMultiCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientServiceCreateMultiCall) DoAndReturn(f func(context.Context, []*entity.Client) error) *MockClientServiceCreateMultiCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NormalizeClients mocks base method.
func (m *MockClientService) NormalizeClients(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NormalizeClients", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// NormalizeClients indicates an expected call of NormalizeClients.
func (mr *MockClientServiceMockRecorder) NormalizeClients(ctx any) *MockClientServiceNormalizeClientsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NormalizeClients", reflect.TypeOf((*MockClientService)(nil).NormalizeClients), ctx)
	return &MockClientServiceNormalizeClientsCall{Call: call}
}

// MockClientServiceNormalizeClientsCall wrap *gomock.Call
type MockClientServiceNormalizeClientsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientServiceNormalizeClientsCall) Return(arg0 error) *MockClientServiceNormalizeClientsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientServiceNormalizeClientsCall) Do(f func(context.Context) error) *MockClientServiceNormalizeClientsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientServiceNormalizeClientsCall) DoAndReturn(f func(context.Context) error) *MockClientServiceNormalizeClientsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
